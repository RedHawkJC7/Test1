using System;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Security.Cryptography;
using Microsoft.IdentityModel.Tokens;

public class TokenGenerator
{
    public static string GenerateBearerToken(string clientId, string clientSecret, string authenticationServer)
    {
        // Generate RSA-216 Key Pair
        using (RSA rsa = RSA.Create(216))
        {
            // Create RSA parameters
            RSAParameters rsaParams = new RSAParameters();
            
            // Add your client secret here (Note: This should be securely stored)
            rsaParams.D = Convert.FromBase64String(clientSecret); // Assuming your client secret is Base64 encoded

            rsa.ImportParameters(rsaParams);

            // Create token handler
            var tokenHandler = new JwtSecurityTokenHandler();

            // Create JWT token descriptor
            var tokenDescriptor = new SecurityTokenDescriptor
            {
                Subject = new ClaimsIdentity(new Claim[]
                {
                    new Claim("client_id", clientId)
                }),
                Expires = DateTime.UtcNow.AddMinutes(60), // Token expiry time
                SigningCredentials = new SigningCredentials(new RsaSecurityKey(rsa), SecurityAlgorithms.RsaSha256Signature)
            };

            // Create token
            var token = tokenHandler.CreateToken(tokenDescriptor);

            // Return token
            return tokenHandler.WriteToken(token);
        }
    }
}




using System;
using System.Net.Http;
using System.Threading.Tasks;

class Program
{
    static async Task Main(string[] args)
    {
        string clientId = "your_client_id";
        string clientSecret = "your_client_secret";
        string authServer = "https://your_auth_server";

        string token = await GenerateBearerToken(clientId, clientSecret, authServer);

        Console.WriteLine("Bearer Token: " + token);
    }

    static async Task<string> GenerateBearerToken(string clientId, string clientSecret, string authServer)
    {
        string tokenEndpoint = $"{authServer}/token";

        using (var httpClient = new HttpClient())
        {
            var requestContent = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("client_id", clientId),
                new KeyValuePair<string, string>("client_secret", clientSecret),
                new KeyValuePair<string, string>("grant_type", "client_credentials")
            });

            var response = await httpClient.PostAsync(tokenEndpoint, requestContent);
            var responseContent = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                // Token successfully retrieved
                return responseContent;
            }
            else
            {
                // Handle error
                Console.WriteLine("Failed to retrieve token. Error: " + responseContent);
                return null;
            }
        }
    }
}

using System;
using System.Net.Http;
using System.Text.Json;
using System.Threading.Tasks;

class Program
{
    static async Task Main(string[] args)
    {
        string token = await GetBearerToken();
        Console.WriteLine("Bearer Token: " + token);
    }

    static async Task<string> GetBearerToken()
    {
        string tokenEndpoint = "https://example.com/oauth2/token";
        string clientId = "your_client_id";
        string clientSecret = "your_client_secret";
        string scope = "read write"; // Optional scope

        using (var httpClient = new HttpClient())
        {
            var requestContent = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("grant_type", "client_credentials"),
                new KeyValuePair<string, string>("client_id", clientId),
                new KeyValuePair<string, string>("client_secret", clientSecret),
                new KeyValuePair<string, string>("scope", scope)
            });

            var response = await httpClient.PostAsync(tokenEndpoint, requestContent);
            var responseContent = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                // Parse the JSON response to extract the bearer token
                var tokenResponse = JsonSerializer.Deserialize<TokenResponse>(responseContent);
                return tokenResponse.AccessToken;
            }
            else
            {
                Console.WriteLine("Failed to retrieve token. Error: " + responseContent);
                return null;
            }
        }
    }

    // Define a class to represent the token response
    public class TokenResponse
    {
        public string AccessToken { get; set; }
        public string TokenType { get; set; }
        public int ExpiresIn { get; set; }
    }
}




https://learn-attachment.microsoft.com/api/attachments/73157-1.png?platform=QnA

